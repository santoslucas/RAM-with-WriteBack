//Lara Gama Santos e Lucas Santos Rodrigues
// cache (L1) - 2 vias

//`include "memoria.v"

module Bloco ();
  // via 1
  reg v1;
  reg LRU1;
  reg dirty1;
  reg [5:0] tag1;
  reg [7:0] data1;

  // via 2
  reg v2;
  reg LRU2;
  reg dirty2;
  reg [5:0] tag2;
  reg [7:0] data2;

endmodule

module cache (
    address,
    clock,
    data,
    wren,
    dataOUT,
	 hit,
	 write_mem
);

  input [7:0] address;
  input clock;
  input [7:0] data;
  input wren;

  output [7:0] dataOUT;
  output hit;
  output write_mem;

  reg [7:0] aux_dataOUT;
  //wire [7:0] dataOUT = aux_dataOUT[7:0];
  reg aux_hit;
  reg aux_write_mem;

  wire [1:0] index = address[1:0];  //separa os bits do índice
  wire [5:0] tag = address[7:2];  //separa os bits da tag

  Bloco bloco0 ();
  Bloco bloco1 ();
  Bloco bloco2 ();
  Bloco bloco3 ();

  initial begin
    bloco0.v1 = 0;
    bloco0.v2 = 0;
    bloco0.LRU1 = 0;
    bloco0.LRU2 = 0;
    bloco0.dirty1 = 0;
    bloco0.dirty2 = 0;

    bloco1.v1 = 0;
    bloco1.v2 = 0;
    bloco1.LRU1 = 0;
    bloco1.LRU2 = 0;
    bloco1.dirty1 = 0;
    bloco1.dirty2 = 0;

    bloco2.v1 = 0;
    bloco2.v2 = 0;
    bloco2.LRU1 = 0;
    bloco2.LRU2 = 0;
    bloco2.dirty1 = 0;
    bloco2.dirty2 = 0;

    bloco3.v1 = 0;
    bloco3.v2 = 0;
    bloco3.LRU1 = 0;
    bloco3.LRU2 = 0;
    bloco3.dirty1 = 0;
    bloco3.dirty2 = 0;

    aux_write_mem = 0;
  end

  //escrita na cache -> instrução load que deu miss
  //escrita na memória -> instrução de store que dirty == 1

  // ESCRITA na cache
  always @(posedge clock or hit==0) begin

    //ENTRADA 0
    if (index == 0) begin
      if(bloco0.LRU1 == 0) begin //VIA 1
        if (bloco0.dirty1 == 1) begin
            aux_write_mem = 1;
        end

        else begin
            aux_write_mem = 0;
        end

        aux_dataOUT = bloco0.data1;
        aux_hit = 1;
        bloco0.LRU1 = 1;
        bloco0.LRU2 = 0;
      end

      else if(bloco0.LRU2 == 0) begin //VIA 2
        if (bloco0.dirty2 == 1) begin
            aux_write_mem = 1;
        end

        else begin
            aux_write_mem = 0;
        end
        
        aux_dataOUT = bloco0.data2;
        aux_hit = 1;
        bloco0.LRU1 = 0;
        bloco0.LRU2 = 1;
      end
    end 
    
    //ENTRADA 1
    else if (index == 1) begin
      if(bloco1.LRU1 == 0)  begin //VIA 1
        if (bloco1.dirty1 == 1) begin
            aux_write_mem = 1;
        end

        else begin
            aux_write_mem = 0;
        end
        
        aux_dataOUT = bloco1.data1;
        aux_hit = 1;
        bloco1.LRU1 = 1;
        bloco1.LRU2 = 0;
        
      end

      else if(bloco1.LRU2 == 0) begin //VIA 2
        if (bloco1.dirty2 == 1) begin
            aux_write_mem = 1;
        end

        else begin
            aux_write_mem = 0;
        end
        
        aux_dataOUT = bloco1.data2;
        aux_hit = 1;
        bloco1.LRU1 = 0;
        bloco1.LRU2 = 1;
      end
    end 
    
    //ENTRADA 2
    else if (index == 2) begin
      if(bloco2.LRU1 == 0) begin //VIA 1
        if (bloco2.dirty1 == 1) begin
            aux_write_mem = 1;
        end

        else begin
            aux_write_mem = 0;
        end
        
        aux_dataOUT = bloco2.data1;
        aux_hit = 1;
        bloco2.LRU1 = 1;
        bloco2.LRU2 = 0;
      end

      else if(bloco2.LRU2 == 0) begin //VIA 2
        if (bloco2.dirty2 == 1) begin
            aux_write_mem = 1;
        end

        else begin
            aux_write_mem = 0;
        end
        
        aux_dataOUT = bloco2.data2;
        aux_hit = 1;
        bloco2.LRU1 = 0;
        bloco2.LRU2 = 1;
      end
    end 
    
    //ENTRADA 3
    else if (index == 3) begin
      if(bloco3.LRU1 == 0) begin //VIA 1
        if (bloco3.dirty1 == 1) begin
            aux_write_mem = 1;
        end

        else begin
            aux_write_mem = 0;
        end
        
        aux_dataOUT = bloco3.data1;
        aux_hit = 1;
        bloco3.LRU1 = 1;
        bloco3.LRU2 = 0;
      end

      else if(bloco3.LRU2 == 0) begin //VIA 2
        if (bloco3.dirty2 == 1) begin
            aux_write_mem = 1;
        end

        else begin
            aux_write_mem = 0;
        end
        
        aux_dataOUT = bloco3.data2;
        aux_hit = 1;
        bloco3.LRU1 = 0;
        bloco3.LRU2 = 1;
      end
    end
  end

  // LEITURA na cache
  always @(negedge clock) begin
    aux_write_mem = 0;
    //DEFINE QUAL ENTRADA SERÁ ACESSADA
    //ENTRADA 0
    if (index == 0) begin
      if(bloco0.tag1 == tag && bloco0.v1 == 1 ) begin //VIA 1
        aux_dataOUT = bloco0.data1;
        aux_hit = 1;
        bloco0.LRU1 = 1;
        bloco0.LRU2 = 0;
      end

      else if(bloco0.tag2 == tag && bloco0.v2 == 1 ) begin //VIA 2
        aux_dataOUT = bloco0.data2;
        aux_hit = 1;
        bloco0.LRU1 = 0;
        bloco0.LRU2 = 1;
      end

      else begin
        aux_hit = 0;
      end
     
    end 
    
    //ENTRADA 1
    else if (index == 1) begin
      if(bloco1.tag1 == tag && bloco1.v1 == 1 ) begin //VIA 1
        aux_dataOUT = bloco1.data1;
        aux_hit = 1;
        bloco1.LRU1 = 1;
        bloco1.LRU2 = 0;
        
      end

      else if(bloco1.tag2 == tag && bloco1.v2 == 1 ) begin //VIA 2
        aux_dataOUT = bloco1.data2;
        aux_hit = 1;
        bloco1.LRU1 = 0;
        bloco1.LRU2 = 1;
      end

      else begin
        aux_hit = 0;
      end
    end 
    
    //ENTRADA 2
    else if (index == 2) begin
      if(bloco2.tag1 == tag && bloco2.v1 == 1 ) begin //VIA 1
        aux_dataOUT = bloco2.data1;
        aux_hit = 1;
        bloco2.LRU1 = 1;
        bloco2.LRU2 = 0;
      end

      else if(bloco2.tag2 == tag && bloco2.v2 == 1 ) begin //VIA 2
        aux_dataOUT = bloco2.data2;
        aux_hit = 1;
        bloco2.LRU1 = 0;
        bloco2.LRU2 = 1;
      end

      else begin
        aux_hit = 0;
      end
    end 
    
    //ENTRADA 3
    else if (index == 3) begin
      if(bloco3.tag1 == tag && bloco3.v1 == 1 ) begin //VIA 1
        aux_dataOUT = bloco3.data1;
        aux_hit = 1;
        bloco3.LRU1 = 1;
        bloco3.LRU2 = 0;
      end

      else if(bloco3.tag2 == tag && bloco3.v2 == 1 ) begin //VIA 2
        aux_dataOUT = bloco3.data2;
        aux_hit = 1;
        bloco3.LRU1 = 0;
        bloco3.LRU2 = 1;
      end

      else begin
        aux_hit = 0;
      end
    end
  end

  assign dataOUT = aux_dataOUT;
  assign hit = aux_hit;
  assign write_mem = aux_write_mem;

endmodule
